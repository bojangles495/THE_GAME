import spyral
import random
import math

WIDTH = 900
HEIGHT = 900
BG_COLOR = (255,255,255)
BLACK = (0, 0, 255)
SIZE = (WIDTH, HEIGHT)
LIST_OF_BUTTONS = []
LIST_OF_INPUTS = []
LIST_OF_QUESTIONS = []
LIST_OF_TOP_IMAGES = []
LIST_OF_BOTTOM_IMAGES = []
LIST_OF_ARITHMETIC_SYMBOLS = []
LIST_OF_BOTTOM_LINES = []
FONT_PATH = "/usr/share/fonts/truetype/freefont/FreeMono.ttf"
class winMessage(spyral.Sprite):
	def __init__(self,scene,img,x,y):
		spyral.Sprite.__init__(self,scene)
		self.image = img
		self.x = x
		self.y = y

class PlayerToken(spyral.Sprite):
	def __init__(self,scene,img,x,y):
		spyral.Sprite.__init__(self,scene)
		self.image = img
		self.x = x
		self.y = y

class ButtonForm(spyral.Form):
	answer_input = spyral.widgets.TextInput(100, "")
	answer_button = spyral.widgets.Button("Answer")
	whichButton = 1

class Questions:
	def __init__(self,aType,number1,number2,answer):
		self.arithmeticType = aType
		self.topNumber = number1
		self.bottomNumber = number2
		self.arithmeticAnswer = answer

class QuestionImage(spyral.Sprite):
	def __init__(self,scene,img,x,y):
		spyral.Sprite.__init__(self,scene)
		self.image = img
		self.x = WIDTH * x
		self.y = HEIGHT * y

class Grid(spyral.Sprite):
	def __init__(self, scene,side):
		spyral.Sprite.__init__(self, scene)
		if(side == "left"):
			self.image = spyral.Image(size=(5,(HEIGHT - 100))).fill(BLACK)
			self.x = WIDTH/3
			self.y = 50
		elif(side == "right"):
			self.image = spyral.Image(size=(5,(HEIGHT - 100))).fill(BLACK)
			self.x = WIDTH * .66
			self.y = 50
		elif(side == "up"):
			self.image = spyral.Image(size=((WIDTH - 100),5)).fill(BLACK)
			self.x = 50
			self.y = HEIGHT/3
		elif(side == "down"):
			self.image = spyral.Image(size=((WIDTH - 100),5)).fill(BLACK)
			self.x = 50
			self.y = HEIGHT * .66
		elif(side == "test"):
			self.image = spyral.Image(size=(100,100)).fill(BLACK)
			self.x = 50
			self.y = HEIGHT * .66

class TicTacToeMain(spyral.Scene):

	def __init__(self, *args, **kwargs):
		global manager
		self.current_player = 1
		self.takenSpots = [[0,0,0],[0,0,0],[0,0,0]]
		spyral.Scene.__init__(self, SIZE)
		self.background = spyral.Image(size=SIZE).fill(BG_COLOR)
		self.grid_left = Grid(self,"left")
		self.grid_right = Grid(self,"right")
		self.grid_up = Grid(self,"up")
		self.grid_down = Grid(self,"down")
		font = spyral.Font(FONT_PATH,24,(0,0,0))
		playerMessage = font.render("Current Player is player " + str(self.current_player))
		self.curPlayerMessage = PlayerToken(self,playerMessage,10,10)
		button_row = [((WIDTH/3)-75),((WIDTH * .66)-75),(WIDTH - 75)]
		button_column = [(HEIGHT/5),(HEIGHT/2),(HEIGHT * .8)]
		count = 0
		for row_value in button_row:
			for column_value in button_column:
				temp = ButtonForm(self)
				temp.whichButton = count
				temp.answer_button.x = row_value
				temp.answer_button.y = column_value
				temp.answer_input.x = row_value - 125
				temp.answer_input.y = column_value + 50
				count = count + 1
		for x in range(0,9):
			num1 = random.randrange(1,50)
			num2 = random.randrange(1,50)	
			whichType = random.randrange(1,4)
			if(whichType == 1):
				arithType = "subtraction"
				ans = num1 - num2
			elif(whichType == 2):
				arithType = "addition"
				ans = num1 + num2
			elif(whichType == 3):
				num1 = random.randrange(1,13)
				num2 = random.randrange(1,13)
				arithType = "multiplication"
				ans = num1 * num2
			LIST_OF_QUESTIONS.append(Questions(arithType,num1,num2,ans))
		whichBox = 0
		a_array = [.12,.12,.12,.48,.48,.48,.81,.81,.81]
		b_array = [.12,.43,.73,.12,.43,.73,.12,.43,.73]
		c_array = [.15,.46,.76,.15,.46,.76,.15,.46,.76]
		d_array = [.1,.1,.1,.46,.46,.46,.79,.79,.79]
		e_array = [.15,.47,.77,.15,.47,.77,.15,.47,.77]
		f_array = [.16,.48,.78,.16,.48,.78,.16,.48,.78]			
		for question in LIST_OF_QUESTIONS:
			top_val = question.topNumber
			bottom_val = question.bottomNumber 
			if(question.arithmeticType == "subtraction"):
				arithmetic_symbol = "-"
			elif(question.arithmeticType == "addition"):
				arithmetic_symbol = "+"
			elif(question.arithmeticType == "multiplication"):
				arithmetic_symbol = "*"
			topText = font.render(str(top_val))
			bottomText = font.render(str(bottom_val))
			mult = font.render(arithmetic_symbol)
			bottomLine = font.render("_____")
			a = a_array[whichBox]
			b = b_array[whichBox]
			c = c_array[whichBox]
			d = d_array[whichBox]
			e = e_array[whichBox]
			f = f_array[whichBox]
			LIST_OF_TOP_IMAGES.append(QuestionImage(self,topText,a,b))
			LIST_OF_BOTTOM_IMAGES.append(QuestionImage(self,bottomText,a,c))
			LIST_OF_ARITHMETIC_SYMBOLS.append(QuestionImage(self,mult,d,e))
			LIST_OF_BOTTOM_LINES.append(QuestionImage(self,bottomLine,d,f))
			whichBox = whichBox + 1
		spyral.event.register("form.ButtonForm.answer_button.clicked",self.answerQuestion)
		spyral.event.register("system.quit", spyral.director.pop)
		spyral.event.register("input.keyboard.down.q", spyral.director.pop)
		
	def answerQuestion(self,widget,form,value):
		font = spyral.Font(FONT_PATH,100,(0,0,0))
		if(int(form.answer_input.value) == LIST_OF_QUESTIONS[form.whichButton].arithmeticAnswer):
			form.answer_input.value = ''
			widget.x = -9000
			form.answer_input.x = -9000
			token_x = LIST_OF_TOP_IMAGES[form.whichButton].x
			token_y = LIST_OF_TOP_IMAGES[form.whichButton].y
			LIST_OF_TOP_IMAGES[form.whichButton].x = -9000
			LIST_OF_TOP_IMAGES[form.whichButton].y = -9000
			LIST_OF_BOTTOM_IMAGES[form.whichButton].x = -9000
			LIST_OF_BOTTOM_IMAGES[form.whichButton].y = -9000
			LIST_OF_ARITHMETIC_SYMBOLS[form.whichButton].x = -9000
			LIST_OF_ARITHMETIC_SYMBOLS[form.whichButton].y = -9000
			LIST_OF_BOTTOM_LINES[form.whichButton].x = -9000
			LIST_OF_BOTTOM_LINES[form.whichButton].y = -9000
			if(self.current_player == 1):
				token = font.render("X")
				PlayerToken(self,token,token_x,token_y)
				self.fillSpot(form.whichButton)
				self.current_player = 2
			else:
				token = font.render("O")
				PlayerToken(self,token,token_x,token_y)
				self.fillSpot(form.whichButton)
				self.current_player = 1
			
		else:
			if(self.current_player == 1):
				self.current_player = 2
			else:
				self.current_player = 1
		font2 = spyral.Font(FONT_PATH,24,(0,0,0))
		playerMessage = font2.render("Current Player is player " + str(self.current_player))
		self.curPlayerMessage.x = -9000
		self.curPlayerMessage.y = -9000
		self.curPlayerMessage = PlayerToken(self,playerMessage,10,10)
	def fillSpot(self,square):
		if(square == 0):
			self.takenSpots[0][0] = self.current_player
		elif(square == 1):
			self.takenSpots[0][1] = self.current_player
		elif(square == 2):
			self.takenSpots[0][2] = self.current_player
		elif(square == 3):
			self.takenSpots[1][0] = self.current_player
		elif(square == 4):
			self.takenSpots[1][1] = self.current_player
		elif(square == 5):
			self.takenSpots[1][2] = self.current_player
		elif(square == 6):
			self.takenSpots[2][0] = self.current_player
		elif(square == 7):
			self.takenSpots[2][1] = self.current_player
		elif(square == 8):
			self.takenSpots[2][2] = self.current_player
		self.checkForWinner()
	def checkForWinner(self):
		isWinner = 0
		font = spyral.Font(FONT_PATH,24,(0,0,0))
		if((self.takenSpots[0][0] == 1 and self.takenSpots[0][1] == 1 and self.takenSpots[0][2] == 1) or (self.takenSpots[0][0] == 2 and self.takenSpots[0][1] == 2 and self.takenSpots[0][2] == 2)):
			isWinner = 1
		elif((self.takenSpots[1][0] == 1 and self.takenSpots[1][1] == 1 and self.takenSpots[1][2] == 1) or (self.takenSpots[1][0] == 2 and self.takenSpots[1][1] == 2 and self.takenSpots[1][2] == 2)):
			isWinner = 1
		elif((self.takenSpots[2][0] == 1 and self.takenSpots[2][1] == 1 and self.takenSpots[2][2] == 1) or (self.takenSpots[2][0] == 2 and self.takenSpots[2][1] == 2 and self.takenSpots[2][2] == 2)):
			isWinner = 1
		elif((self.takenSpots[0][0] == 1 and self.takenSpots[1][0] == 1 and self.takenSpots[2][0] == 1) or (self.takenSpots[0][0] == 2 and self.takenSpots[1][0] == 2 and self.takenSpots[2][0] == 2)):
			isWinner = 1
		elif((self.takenSpots[0][1] == 1 and self.takenSpots[1][1] == 1 and self.takenSpots[2][1] == 1) or (self.takenSpots[0][1] == 2 and self.takenSpots[1][1] == 2 and self.takenSpots[2][1] == 2)):
			isWinner = 1
		elif((self.takenSpots[0][2] == 1 and self.takenSpots[1][2] == 1 and self.takenSpots[2][2] == 1) or (self.takenSpots[0][2] == 2 and self.takenSpots[1][2] == 2 and self.takenSpots[2][2] == 2)):
			isWinner = 1
		elif((self.takenSpots[0][0] == 1 and self.takenSpots[1][1] == 1 and self.takenSpots[2][2] == 1) or (self.takenSpots[0][0] == 2 and self.takenSpots[1][1] == 2 and self.takenSpots[2][2] == 2)):
			isWinner = 1
		elif((self.takenSpots[2][0] == 1 and self.takenSpots[1][1] == 1 and self.takenSpots[0][2] == 1) or (self.takenSpots[2][0] == 2 and self.takenSpots[1][1] == 2 and self.takenSpots[0][2] == 2)):
			isWinner = 1
		count = 0		
		for column in self.takenSpots:
			for row in column:
				if(row != 0):
					count = count + 1
		if(count == 9):
			isWinner = 2
		if(isWinner == 1):
			message = font.render("Player " + str(self.takenSpots[0][0]) + " wins!");
			winMessage(self,message,(WIDTH/2),10)
		elif(isWinner == 2):
			message = font.render("Its a tie!");
			winMessage(self,message,(WIDTH/2),10)	
